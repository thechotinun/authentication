basePath: /api
definitions:
  models.Book:
    properties:
      author:
        maxLength: 255
        type: string
      book_attrs:
        $ref: '#/definitions/models.BookAttrs'
      book_status:
        type: integer
      created_at:
        type: string
      id:
        type: string
      title:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - author
    - book_attrs
    - book_status
    - id
    - title
    - user_id
    type: object
  models.BookAttrs:
    properties:
      description:
        type: string
      picture:
        type: string
      rating:
        maximum: 10
        minimum: 1
        type: integer
    required:
    - description
    - picture
    - rating
    type: object
  models.CreateBook:
    properties:
      author:
        maxLength: 255
        type: string
      book_attrs:
        $ref: '#/definitions/models.BookAttrs'
      title:
        maxLength: 255
        type: string
    required:
    - author
    - book_attrs
    - title
    type: object
  models.Renew:
    properties:
      refresh_token:
        type: string
    type: object
  models.SignIn:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        type: string
    required:
    - email
    - password
    type: object
  models.SignUp:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        type: string
      user_role:
        maxLength: 25
        type: string
    required:
    - email
    - password
    - user_role
    type: object
  models.UpdateBook:
    properties:
      author:
        maxLength: 255
        type: string
      book_attrs:
        $ref: '#/definitions/models.BookAttrs'
      title:
        maxLength: 255
        type: string
    required:
    - author
    - book_attrs
    - title
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        maxLength: 255
        type: string
      id:
        type: string
      password_hash:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_role:
        maxLength: 25
        type: string
      user_status:
        type: integer
    required:
    - email
    - id
    - password_hash
    - user_role
    - user_status
    type: object
info:
  contact:
    email: your@mail.com
    name: API Support
  description: This is an auto-generated API Docs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API
  version: "1.0"
paths:
  /v1/book:
    post:
      consumes:
      - application/json
      description: Create a new book.
      parameters:
      - description: Book object that needs to be added to the store
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateBook'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - ApiKeyAuth: []
      summary: create a new book
      tags:
      - Book
  /v1/book/{id}:
    delete:
      consumes:
      - application/json
      description: Delete book by given ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: delete book by given ID
      tags:
      - Book
    get:
      consumes:
      - application/json
      description: Get book by given ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: get book by given ID
      tags:
      - Book
    put:
      consumes:
      - application/json
      description: Update book.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Book object that needs to be added to the store
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBook'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: update book
      tags:
      - Book
  /v1/books:
    get:
      consumes:
      - application/json
      description: Get all exists books.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: get all exists books
      tags:
      - Books
  /v1/token/renew:
    post:
      consumes:
      - application/json
      description: Renew access and refresh tokens.
      parameters:
      - description: Refresh token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Renew'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: renew access and refresh tokens
      tags:
      - Token
  /v1/user/sign/in:
    post:
      consumes:
      - application/json
      description: Auth user and return access and refresh token.
      parameters:
      - description: User SignIn
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SignIn'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: auth user and return access and refresh token
      tags:
      - User
  /v1/user/sign/out:
    post:
      consumes:
      - application/json
      description: De-authorize user and delete refresh token from Redis.
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: de-authorize user and delete refresh token from Redis
      tags:
      - User
  /v1/user/sign/up:
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: User object that needs to be added to the store
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SignUp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: create a new user
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
